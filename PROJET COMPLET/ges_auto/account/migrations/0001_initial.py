# Generated by Django 5.1.6 on 2025-02-15 22:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('matricule', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Matricule')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom')),
                ('prenom', models.CharField(blank=True, max_length=255, null=True, verbose_name='Prénom')),
                ('role', models.CharField(choices=[('SUPERUSER', 'Super Administrateur'), ('SECRETAIRE', 'Secrétaire'), ('EMPLOYE', 'Employé')], default='SUPERUSER', max_length=20, verbose_name='Rôle')),
                ('fonction', models.CharField(blank=True, max_length=255, null=True)),
                ('telephone_pro', models.CharField(blank=True, max_length=20, null=True)),
                ('service', models.CharField(blank=True, max_length=100, null=True)),
                ('photo_profile', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Photo de profil')),
                ('adresse', models.CharField(blank=True, max_length=255, null=True)),
                ('code_postal', models.CharField(blank=True, max_length=10, null=True)),
                ('ville', models.CharField(blank=True, max_length=100, null=True)),
                ('telephone_perso', models.CharField(blank=True, max_length=20, null=True)),
                ('date_embauche', models.DateField(blank=True, null=True)),
                ('dernier_connexion', models.DateTimeField(blank=True, null=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('date_enregistrement', models.DateTimeField(default=django.utils.timezone.now)),
                ('acces_gestion_vehicules', models.BooleanField(default=False, verbose_name='Accès à la gestion des véhicules')),
                ('acces_maintenance', models.BooleanField(default=False, verbose_name='Accès à la maintenance')),
                ('acces_rapports', models.BooleanField(default=False, verbose_name='Accès aux rapports')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', related_query_name='customuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_enregistrement'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
